/* tslint:disable */
/* eslint-disable */
/**
 * Towncryer API
 * A service for handling business communication with its customers
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@volvlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface APICredentialsLoginPayload
 */
export interface APICredentialsLoginPayload {
    /**
     * 
     * @type {string}
     * @memberof APICredentialsLoginPayload
     */
    'apiKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof APICredentialsLoginPayload
     */
    'secretKey'?: string;
}
/**
 * 
 * @export
 * @interface APICredentialsLoginResponse
 */
export interface APICredentialsLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof APICredentialsLoginResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof APICredentialsLoginResponse
     */
    'expiresAt'?: number;
    /**
     * 
     * @type {string}
     * @memberof APICredentialsLoginResponse
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * 
     * @type {number}
     * @memberof ApiError
     */
    'code'?: number;
    /**
     * 
     * @type {object}
     * @memberof ApiError
     */
    'errors'?: object;
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    'code'?: string;
    /**
     * 
     * @type {object}
     * @memberof ApiResponse
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CreateCustomerRequest
 */
export interface CreateCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'externalId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'firstName'?: string;
    /**
     * 
     * @type {Array<CustomerIdentityRequest>}
     * @memberof CreateCustomerRequest
     */
    'identities': Array<CustomerIdentityRequest>;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'lastName'?: string;
    /**
     * 
     * @type {TypesChannelCustomerCreatedFrom}
     * @memberof CreateCustomerRequest
     */
    'source': TypesChannelCustomerCreatedFrom;
}


/**
 * 
 * @export
 * @interface CustomerIdentityRequest
 */
export interface CustomerIdentityRequest {
    /**
     * 
     * @type {boolean}
     * @memberof CustomerIdentityRequest
     */
    'isPrimary'?: boolean;
    /**
     * 
     * @type {EntitiesIdentityType}
     * @memberof CustomerIdentityRequest
     */
    'type': EntitiesIdentityType;
    /**
     * 
     * @type {string}
     * @memberof CustomerIdentityRequest
     */
    'value': string;
}


/**
 * 
 * @export
 * @interface EmailFrom
 */
export interface EmailFrom {
    /**
     * 
     * @type {string}
     * @memberof EmailFrom
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof EmailFrom
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface EmailRecipient
 */
export interface EmailRecipient {
    /**
     * 
     * @type {Array<number>}
     * @memberof EmailRecipient
     */
    'context'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof EmailRecipient
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof EmailRecipient
     */
    'name': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EntitiesIdentityType = {
    IdentityTypeEmail: 'email',
    IdentityTypePhone: 'phone',
    IdentityTypePushToken: 'push_token',
    IdentityTypeExternalID: 'external_id'
} as const;

export type EntitiesIdentityType = typeof EntitiesIdentityType[keyof typeof EntitiesIdentityType];


/**
 * 
 * @export
 * @interface EventCustomerRequest
 */
export interface EventCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'externalId': string;
    /**
     * 
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'pushNotificationToken'?: string;
}
/**
 * 
 * @export
 * @interface MessagesStats
 */
export interface MessagesStats {
    /**
     * 
     * @type {number}
     * @memberof MessagesStats
     */
    'failed'?: number;
    /**
     * 
     * @type {number}
     * @memberof MessagesStats
     */
    'pending'?: number;
    /**
     * 
     * @type {number}
     * @memberof MessagesStats
     */
    'read'?: number;
    /**
     * 
     * @type {number}
     * @memberof MessagesStats
     */
    'sent'?: number;
    /**
     * 
     * @type {number}
     * @memberof MessagesStats
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface PaginatePage
 */
export interface PaginatePage {
    /**
     * 
     * @type {boolean}
     * @memberof PaginatePage
     */
    'error'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PaginatePage
     */
    'error_message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatePage
     */
    'first'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof PaginatePage
     */
    'items'?: object;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatePage
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PaginatePage
     */
    'max_page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePage
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePage
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePage
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePage
     */
    'total_pages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatePage
     */
    'visible'?: number;
}
/**
 * 
 * @export
 * @interface PublishEventPayload
 */
export interface PublishEventPayload {
    /**
     * 
     * @type {EventCustomerRequest}
     * @memberof PublishEventPayload
     */
    'customer': EventCustomerRequest;
    /**
     * 
     * @type {object}
     * @memberof PublishEventPayload
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof PublishEventPayload
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublishEventPayload
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface RequestsClientAppLoginPayload
 */
export interface RequestsClientAppLoginPayload {
    /**
     * 
     * @type {string}
     * @memberof RequestsClientAppLoginPayload
     */
    'apiKey'?: string;
}
/**
 * 
 * @export
 * @interface ResponsesClientAppLoginResponsePayload
 */
export interface ResponsesClientAppLoginResponsePayload {
    /**
     * 
     * @type {string}
     * @memberof ResponsesClientAppLoginResponsePayload
     */
    'accessToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResponsesClientAppLoginResponsePayload
     */
    'expiresAt'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponsesClientAppLoginResponsePayload
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface ScheduleInfo
 */
export interface ScheduleInfo {
    /**
     * 
     * @type {string}
     * @memberof ScheduleInfo
     */
    'jobId'?: string;
    /**
     * 
     * @type {TypesJobStatus}
     * @memberof ScheduleInfo
     */
    'status'?: TypesJobStatus;
}


/**
 * 
 * @export
 * @interface SendBulkMessagesPayload
 */
export interface SendBulkMessagesPayload {
    /**
     * 
     * @type {Array<SendEmailPayload>}
     * @memberof SendBulkMessagesPayload
     */
    'emails'?: Array<SendEmailPayload>;
    /**
     * 
     * @type {Array<SendPushNotificationPayload>}
     * @memberof SendBulkMessagesPayload
     */
    'pushNotifications'?: Array<SendPushNotificationPayload>;
    /**
     * 
     * @type {Array<SendSMSPayload>}
     * @memberof SendBulkMessagesPayload
     */
    'smses'?: Array<SendSMSPayload>;
}
/**
 * 
 * @export
 * @interface SendEmailPayload
 */
export interface SendEmailPayload {
    /**
     * 
     * @type {string}
     * @memberof SendEmailPayload
     */
    'content'?: string;
    /**
     * 
     * @type {EmailFrom}
     * @memberof SendEmailPayload
     */
    'from'?: EmailFrom;
    /**
     * 
     * @type {Array<EmailRecipient>}
     * @memberof SendEmailPayload
     */
    'recipients': Array<EmailRecipient>;
    /**
     * 
     * @type {string}
     * @memberof SendEmailPayload
     */
    'templateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendEmailPayload
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface SendPushNotificationPayload
 */
export interface SendPushNotificationPayload {
    /**
     * 
     * @type {string}
     * @memberof SendPushNotificationPayload
     */
    'content'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof SendPushNotificationPayload
     */
    'data'?: Array<number>;
    /**
     * 
     * @type {Array<SendPushNotificationRecipient>}
     * @memberof SendPushNotificationPayload
     */
    'recipients': Array<SendPushNotificationRecipient>;
    /**
     * 
     * @type {string}
     * @memberof SendPushNotificationPayload
     */
    'templateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendPushNotificationPayload
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface SendPushNotificationRecipient
 */
export interface SendPushNotificationRecipient {
    /**
     * 
     * @type {Array<number>}
     * @memberof SendPushNotificationRecipient
     */
    'context'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof SendPushNotificationRecipient
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface SendSMSPayload
 */
export interface SendSMSPayload {
    /**
     * 
     * @type {string}
     * @memberof SendSMSPayload
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendSMSPayload
     */
    'from': string;
    /**
     * 
     * @type {string}
     * @memberof SendSMSPayload
     */
    'templateId'?: string;
    /**
     * 
     * @type {Array<SendSMSRecipient>}
     * @memberof SendSMSPayload
     */
    'to': Array<SendSMSRecipient>;
}
/**
 * 
 * @export
 * @interface SendSMSRecipient
 */
export interface SendSMSRecipient {
    /**
     * 
     * @type {Array<number>}
     * @memberof SendSMSRecipient
     */
    'context'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof SendSMSRecipient
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TypesChannelCustomerCreatedFrom = {
    ChannelCustomerCreatedFromWhatsApp: 'WhatsApp',
    ChannelCustomerCreatedFromEvent: 'Event',
    ChannelCustomerCreatedFromCSVUpload: 'CSVUpload',
    ChannelCustomerCreatedFromTowncryerWebappForm: 'TowncryerWebappForm',
    ChannelCustomerCreatedFromTowncryerAPI: 'TowncryerAPI'
} as const;

export type TypesChannelCustomerCreatedFrom = typeof TypesChannelCustomerCreatedFrom[keyof typeof TypesChannelCustomerCreatedFrom];


/**
 * 
 * @export
 * @enum {number}
 */

export const TypesJobStatus = {
    JobStatusPending: 0,
    JobStatusQueued: 1,
    JobStatusProcessing: 2,
    JobStatusCompleted: 3,
    JobStatusFailed: 4,
    JobStatusCancelled: 5
} as const;

export type TypesJobStatus = typeof TypesJobStatus[keyof typeof TypesJobStatus];



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Logs in a client app using client app credentials
         * @summary Client App Login
         * @param {RequestsClientAppLoginPayload} request Client app login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientAppLogin: async (request: RequestsClientAppLoginPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('clientAppLogin', 'request', request)
            const localVarPath = `/auth/authorize/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a short lived token using ApiKey and ApiSecret
         * @summary Get Short Lived Token
         * @param {APICredentialsLoginPayload} request Login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShortLivedToken: async (request: APICredentialsLoginPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('getShortLivedToken', 'request', request)
            const localVarPath = `/auth/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refreshes a short lived token
         * @summary Refresh Short Lived Token
         * @param {RefreshTokenRequest} request Refresh token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshShortLivedToken: async (request: RefreshTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('refreshShortLivedToken', 'request', request)
            const localVarPath = `/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Logs in a client app using client app credentials
         * @summary Client App Login
         * @param {RequestsClientAppLoginPayload} request Client app login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientAppLogin(request: RequestsClientAppLoginPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesClientAppLoginResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientAppLogin(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.clientAppLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets a short lived token using ApiKey and ApiSecret
         * @summary Get Short Lived Token
         * @param {APICredentialsLoginPayload} request Login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShortLivedToken(request: APICredentialsLoginPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APICredentialsLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShortLivedToken(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getShortLivedToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Refreshes a short lived token
         * @summary Refresh Short Lived Token
         * @param {RefreshTokenRequest} request Refresh token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshShortLivedToken(request: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APICredentialsLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshShortLivedToken(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.refreshShortLivedToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Logs in a client app using client app credentials
         * @summary Client App Login
         * @param {RequestsClientAppLoginPayload} request Client app login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientAppLogin(request: RequestsClientAppLoginPayload, options?: RawAxiosRequestConfig): AxiosPromise<ResponsesClientAppLoginResponsePayload> {
            return localVarFp.clientAppLogin(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a short lived token using ApiKey and ApiSecret
         * @summary Get Short Lived Token
         * @param {APICredentialsLoginPayload} request Login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShortLivedToken(request: APICredentialsLoginPayload, options?: RawAxiosRequestConfig): AxiosPromise<APICredentialsLoginResponse> {
            return localVarFp.getShortLivedToken(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Refreshes a short lived token
         * @summary Refresh Short Lived Token
         * @param {RefreshTokenRequest} request Refresh token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshShortLivedToken(request: RefreshTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<APICredentialsLoginResponse> {
            return localVarFp.refreshShortLivedToken(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Logs in a client app using client app credentials
     * @summary Client App Login
     * @param {RequestsClientAppLoginPayload} request Client app login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public clientAppLogin(request: RequestsClientAppLoginPayload, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).clientAppLogin(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a short lived token using ApiKey and ApiSecret
     * @summary Get Short Lived Token
     * @param {APICredentialsLoginPayload} request Login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getShortLivedToken(request: APICredentialsLoginPayload, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getShortLivedToken(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refreshes a short lived token
     * @summary Refresh Short Lived Token
     * @param {RefreshTokenRequest} request Refresh token request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshShortLivedToken(request: RefreshTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshShortLivedToken(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a customer
         * @summary Create Customer
         * @param {CreateCustomerRequest} request Create customer request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: async (request: CreateCustomerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('createCustomer', 'request', request)
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a customer
         * @summary Create Customer
         * @param {CreateCustomerRequest} request Create customer request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomer(request: CreateCustomerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomer(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomersApi.createCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersApiFp(configuration)
    return {
        /**
         * Creates a customer
         * @summary Create Customer
         * @param {CreateCustomerRequest} request Create customer request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(request: CreateCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse> {
            return localVarFp.createCustomer(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI {
    /**
     * Creates a customer
     * @summary Create Customer
     * @param {CreateCustomerRequest} request Create customer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public createCustomer(request: CreateCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomersApiFp(this.configuration).createCustomer(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accepts an event
         * @summary Accept Event
         * @param {PublishEventPayload} request Event request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accept: async (request: PublishEventPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('accept', 'request', request)
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Accepts an event
         * @summary Accept Event
         * @param {PublishEventPayload} request Event request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accept(request: PublishEventPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accept(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.accept']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * Accepts an event
         * @summary Accept Event
         * @param {PublishEventPayload} request Event request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accept(request: PublishEventPayload, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse> {
            return localVarFp.accept(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * Accepts an event
     * @summary Accept Event
     * @param {PublishEventPayload} request Event request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public accept(request: PublishEventPayload, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).accept(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get customer\'s messages stats while optionally filtering by channel
         * @summary Get customer\'s messages stats
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerMessagesStats: async (customerId: string, channel?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCustomerMessagesStats', 'customerId', customerId)
            const localVarPath = `/customers/{customerId}/messages/stats`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List customer\'s messages while optionally filtering by channel
         * @summary List customer\'s messages filtering by channel
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessagesByCustomerAndChannel: async (customerId: string, channel?: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('listMessagesByCustomerAndChannel', 'customerId', customerId)
            const localVarPath = `/customers/{customerId}/messages`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a message as read
         * @summary Mark Message As Read
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsRead: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('markMessageAsRead', 'id', id)
            const localVarPath = `/messages/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message
         * @summary Send Message
         * @param {SendBulkMessagesPayload} request Send bulk messages payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: async (request: SendBulkMessagesPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('sendMessage', 'request', request)
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get customer\'s messages stats while optionally filtering by channel
         * @summary Get customer\'s messages stats
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerMessagesStats(customerId: string, channel?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesStats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerMessagesStats(customerId, channel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.getCustomerMessagesStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List customer\'s messages while optionally filtering by channel
         * @summary List customer\'s messages filtering by channel
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMessagesByCustomerAndChannel(customerId: string, channel?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatePage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMessagesByCustomerAndChannel(customerId, channel, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.listMessagesByCustomerAndChannel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Marks a message as read
         * @summary Mark Message As Read
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markMessageAsRead(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markMessageAsRead(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.markMessageAsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sends a message
         * @summary Send Message
         * @param {SendBulkMessagesPayload} request Send bulk messages payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessage(request: SendBulkMessagesPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessage(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.sendMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * Get customer\'s messages stats while optionally filtering by channel
         * @summary Get customer\'s messages stats
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerMessagesStats(customerId: string, channel?: string, options?: RawAxiosRequestConfig): AxiosPromise<MessagesStats> {
            return localVarFp.getCustomerMessagesStats(customerId, channel, options).then((request) => request(axios, basePath));
        },
        /**
         * List customer\'s messages while optionally filtering by channel
         * @summary List customer\'s messages filtering by channel
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessagesByCustomerAndChannel(customerId: string, channel?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatePage> {
            return localVarFp.listMessagesByCustomerAndChannel(customerId, channel, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a message as read
         * @summary Mark Message As Read
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsRead(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse> {
            return localVarFp.markMessageAsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message
         * @summary Send Message
         * @param {SendBulkMessagesPayload} request Send bulk messages payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(request: SendBulkMessagesPayload, options?: RawAxiosRequestConfig): AxiosPromise<ScheduleInfo> {
            return localVarFp.sendMessage(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * Get customer\'s messages stats while optionally filtering by channel
     * @summary Get customer\'s messages stats
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public getCustomerMessagesStats(customerId: string, channel?: string, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).getCustomerMessagesStats(customerId, channel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List customer\'s messages while optionally filtering by channel
     * @summary List customer\'s messages filtering by channel
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public listMessagesByCustomerAndChannel(customerId: string, channel?: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).listMessagesByCustomerAndChannel(customerId, channel, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a message as read
     * @summary Mark Message As Read
     * @param {string} id Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public markMessageAsRead(id: string, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).markMessageAsRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message
     * @summary Send Message
     * @param {SendBulkMessagesPayload} request Send bulk messages payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public sendMessage(request: SendBulkMessagesPayload, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).sendMessage(request, options).then((request) => request(this.axios, this.basePath));
    }
}



