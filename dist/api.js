"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Towncryer API
 * A service for handling business communication with its customers
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@volvlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagesApi = exports.MessagesApiFactory = exports.MessagesApiFp = exports.MessagesApiAxiosParamCreator = exports.EventsApi = exports.EventsApiFactory = exports.EventsApiFp = exports.EventsApiAxiosParamCreator = exports.CustomersApi = exports.CustomersApiFactory = exports.CustomersApiFp = exports.CustomersApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.TypesJobStatus = exports.TypesChannelCustomerCreatedFrom = exports.EntitiesIdentityType = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.EntitiesIdentityType = {
    IdentityTypeEmail: 'email',
    IdentityTypePhone: 'phone',
    IdentityTypePushToken: 'push_token',
    IdentityTypeExternalID: 'external_id'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.TypesChannelCustomerCreatedFrom = {
    ChannelCustomerCreatedFromWhatsApp: 'WhatsApp',
    ChannelCustomerCreatedFromEvent: 'Event',
    ChannelCustomerCreatedFromCSVUpload: 'CSVUpload',
    ChannelCustomerCreatedFromTowncryerWebappForm: 'TowncryerWebappForm',
    ChannelCustomerCreatedFromTowncryerAPI: 'TowncryerAPI'
};
/**
 *
 * @export
 * @enum {number}
 */
exports.TypesJobStatus = {
    JobStatusPending: 0,
    JobStatusQueued: 1,
    JobStatusProcessing: 2,
    JobStatusCompleted: 3,
    JobStatusFailed: 4,
    JobStatusCancelled: 5
};
/**
 * AuthApi - axios parameter creator
 * @export
 */
const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Logs in a client app using client app credentials
         * @summary Client App Login
         * @param {RequestsClientAppLoginPayload} request Client app login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientAppLogin: (request_1, ...args_1) => __awaiter(this, [request_1, ...args_1], void 0, function* (request, options = {}) {
            // verify required parameter 'request' is not null or undefined
            (0, common_1.assertParamExists)('clientAppLogin', 'request', request);
            const localVarPath = `/auth/authorize/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets a short lived token using ApiKey and ApiSecret
         * @summary Get Short Lived Token
         * @param {APICredentialsLoginPayload} request Login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShortLivedToken: (request_1, ...args_1) => __awaiter(this, [request_1, ...args_1], void 0, function* (request, options = {}) {
            // verify required parameter 'request' is not null or undefined
            (0, common_1.assertParamExists)('getShortLivedToken', 'request', request);
            const localVarPath = `/auth/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Refreshes a short lived token
         * @summary Refresh Short Lived Token
         * @param {RefreshTokenRequest} request Refresh token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshShortLivedToken: (request_1, ...args_1) => __awaiter(this, [request_1, ...args_1], void 0, function* (request, options = {}) {
            // verify required parameter 'request' is not null or undefined
            (0, common_1.assertParamExists)('refreshShortLivedToken', 'request', request);
            const localVarPath = `/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         * Logs in a client app using client app credentials
         * @summary Client App Login
         * @param {RequestsClientAppLoginPayload} request Client app login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientAppLogin(request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.clientAppLogin(request, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.clientAppLogin']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Gets a short lived token using ApiKey and ApiSecret
         * @summary Get Short Lived Token
         * @param {APICredentialsLoginPayload} request Login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShortLivedToken(request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getShortLivedToken(request, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.getShortLivedToken']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Refreshes a short lived token
         * @summary Refresh Short Lived Token
         * @param {RefreshTokenRequest} request Refresh token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshShortLivedToken(request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.refreshShortLivedToken(request, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.refreshShortLivedToken']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         * Logs in a client app using client app credentials
         * @summary Client App Login
         * @param {RequestsClientAppLoginPayload} request Client app login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientAppLogin(request, options) {
            return localVarFp.clientAppLogin(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a short lived token using ApiKey and ApiSecret
         * @summary Get Short Lived Token
         * @param {APICredentialsLoginPayload} request Login request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShortLivedToken(request, options) {
            return localVarFp.getShortLivedToken(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Refreshes a short lived token
         * @summary Refresh Short Lived Token
         * @param {RefreshTokenRequest} request Refresh token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshShortLivedToken(request, options) {
            return localVarFp.refreshShortLivedToken(request, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
class AuthApi extends base_1.BaseAPI {
    /**
     * Logs in a client app using client app credentials
     * @summary Client App Login
     * @param {RequestsClientAppLoginPayload} request Client app login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    clientAppLogin(request, options) {
        return (0, exports.AuthApiFp)(this.configuration).clientAppLogin(request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a short lived token using ApiKey and ApiSecret
     * @summary Get Short Lived Token
     * @param {APICredentialsLoginPayload} request Login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getShortLivedToken(request, options) {
        return (0, exports.AuthApiFp)(this.configuration).getShortLivedToken(request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Refreshes a short lived token
     * @summary Refresh Short Lived Token
     * @param {RefreshTokenRequest} request Refresh token request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    refreshShortLivedToken(request, options) {
        return (0, exports.AuthApiFp)(this.configuration).refreshShortLivedToken(request, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthApi = AuthApi;
/**
 * CustomersApi - axios parameter creator
 * @export
 */
const CustomersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a customer
         * @summary Create Customer
         * @param {CreateCustomerRequest} request Create customer request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: (request_1, ...args_1) => __awaiter(this, [request_1, ...args_1], void 0, function* (request, options = {}) {
            // verify required parameter 'request' is not null or undefined
            (0, common_1.assertParamExists)('createCustomer', 'request', request);
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.CustomersApiAxiosParamCreator = CustomersApiAxiosParamCreator;
/**
 * CustomersApi - functional programming interface
 * @export
 */
const CustomersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CustomersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a customer
         * @summary Create Customer
         * @param {CreateCustomerRequest} request Create customer request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createCustomer(request, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CustomersApi.createCustomer']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.CustomersApiFp = CustomersApiFp;
/**
 * CustomersApi - factory interface
 * @export
 */
const CustomersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CustomersApiFp)(configuration);
    return {
        /**
         * Creates a customer
         * @summary Create Customer
         * @param {CreateCustomerRequest} request Create customer request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(request, options) {
            return localVarFp.createCustomer(request, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CustomersApiFactory = CustomersApiFactory;
/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
class CustomersApi extends base_1.BaseAPI {
    /**
     * Creates a customer
     * @summary Create Customer
     * @param {CreateCustomerRequest} request Create customer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    createCustomer(request, options) {
        return (0, exports.CustomersApiFp)(this.configuration).createCustomer(request, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CustomersApi = CustomersApi;
/**
 * EventsApi - axios parameter creator
 * @export
 */
const EventsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Accepts an event
         * @summary Accept Event
         * @param {PublishEventPayload} request Event request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accept: (request_1, ...args_1) => __awaiter(this, [request_1, ...args_1], void 0, function* (request, options = {}) {
            // verify required parameter 'request' is not null or undefined
            (0, common_1.assertParamExists)('accept', 'request', request);
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.EventsApiAxiosParamCreator = EventsApiAxiosParamCreator;
/**
 * EventsApi - functional programming interface
 * @export
 */
const EventsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.EventsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Accepts an event
         * @summary Accept Event
         * @param {PublishEventPayload} request Event request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accept(request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.accept(request, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['EventsApi.accept']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.EventsApiFp = EventsApiFp;
/**
 * EventsApi - factory interface
 * @export
 */
const EventsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.EventsApiFp)(configuration);
    return {
        /**
         * Accepts an event
         * @summary Accept Event
         * @param {PublishEventPayload} request Event request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accept(request, options) {
            return localVarFp.accept(request, options).then((request) => request(axios, basePath));
        },
    };
};
exports.EventsApiFactory = EventsApiFactory;
/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
class EventsApi extends base_1.BaseAPI {
    /**
     * Accepts an event
     * @summary Accept Event
     * @param {PublishEventPayload} request Event request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    accept(request, options) {
        return (0, exports.EventsApiFp)(this.configuration).accept(request, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EventsApi = EventsApi;
/**
 * MessagesApi - axios parameter creator
 * @export
 */
const MessagesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get customer\'s messages stats while optionally filtering by channel
         * @summary Get customer\'s messages stats
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerMessagesStats: (customerId_1, channel_1, ...args_1) => __awaiter(this, [customerId_1, channel_1, ...args_1], void 0, function* (customerId, channel, options = {}) {
            // verify required parameter 'customerId' is not null or undefined
            (0, common_1.assertParamExists)('getCustomerMessagesStats', 'customerId', customerId);
            const localVarPath = `/customers/{customerId}/messages/stats`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List customer\'s messages while optionally filtering by channel
         * @summary List customer\'s messages filtering by channel
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessagesByCustomerAndChannel: (customerId_1, channel_1, page_1, size_1, ...args_1) => __awaiter(this, [customerId_1, channel_1, page_1, size_1, ...args_1], void 0, function* (customerId, channel, page, size, options = {}) {
            // verify required parameter 'customerId' is not null or undefined
            (0, common_1.assertParamExists)('listMessagesByCustomerAndChannel', 'customerId', customerId);
            const localVarPath = `/customers/{customerId}/messages`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Marks a message as read
         * @summary Mark Message As Read
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsRead: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('markMessageAsRead', 'id', id);
            const localVarPath = `/messages/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Sends a message
         * @summary Send Message
         * @param {SendBulkMessagesPayload} request Send bulk messages payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: (request_1, ...args_1) => __awaiter(this, [request_1, ...args_1], void 0, function* (request, options = {}) {
            // verify required parameter 'request' is not null or undefined
            (0, common_1.assertParamExists)('sendMessage', 'request', request);
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MessagesApiAxiosParamCreator = MessagesApiAxiosParamCreator;
/**
 * MessagesApi - functional programming interface
 * @export
 */
const MessagesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MessagesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get customer\'s messages stats while optionally filtering by channel
         * @summary Get customer\'s messages stats
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerMessagesStats(customerId, channel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCustomerMessagesStats(customerId, channel, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MessagesApi.getCustomerMessagesStats']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * List customer\'s messages while optionally filtering by channel
         * @summary List customer\'s messages filtering by channel
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessagesByCustomerAndChannel(customerId, channel, page, size, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listMessagesByCustomerAndChannel(customerId, channel, page, size, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MessagesApi.listMessagesByCustomerAndChannel']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Marks a message as read
         * @summary Mark Message As Read
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsRead(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.markMessageAsRead(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MessagesApi.markMessageAsRead']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Sends a message
         * @summary Send Message
         * @param {SendBulkMessagesPayload} request Send bulk messages payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sendMessage(request, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MessagesApi.sendMessage']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.MessagesApiFp = MessagesApiFp;
/**
 * MessagesApi - factory interface
 * @export
 */
const MessagesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MessagesApiFp)(configuration);
    return {
        /**
         * Get customer\'s messages stats while optionally filtering by channel
         * @summary Get customer\'s messages stats
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerMessagesStats(customerId, channel, options) {
            return localVarFp.getCustomerMessagesStats(customerId, channel, options).then((request) => request(axios, basePath));
        },
        /**
         * List customer\'s messages while optionally filtering by channel
         * @summary List customer\'s messages filtering by channel
         * @param {string} customerId Customer ID
         * @param {string} [channel] Channel
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessagesByCustomerAndChannel(customerId, channel, page, size, options) {
            return localVarFp.listMessagesByCustomerAndChannel(customerId, channel, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a message as read
         * @summary Mark Message As Read
         * @param {string} id Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsRead(id, options) {
            return localVarFp.markMessageAsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message
         * @summary Send Message
         * @param {SendBulkMessagesPayload} request Send bulk messages payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(request, options) {
            return localVarFp.sendMessage(request, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MessagesApiFactory = MessagesApiFactory;
/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
class MessagesApi extends base_1.BaseAPI {
    /**
     * Get customer\'s messages stats while optionally filtering by channel
     * @summary Get customer\'s messages stats
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    getCustomerMessagesStats(customerId, channel, options) {
        return (0, exports.MessagesApiFp)(this.configuration).getCustomerMessagesStats(customerId, channel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List customer\'s messages while optionally filtering by channel
     * @summary List customer\'s messages filtering by channel
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    listMessagesByCustomerAndChannel(customerId, channel, page, size, options) {
        return (0, exports.MessagesApiFp)(this.configuration).listMessagesByCustomerAndChannel(customerId, channel, page, size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Marks a message as read
     * @summary Mark Message As Read
     * @param {string} id Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    markMessageAsRead(id, options) {
        return (0, exports.MessagesApiFp)(this.configuration).markMessageAsRead(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sends a message
     * @summary Send Message
     * @param {SendBulkMessagesPayload} request Send bulk messages payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    sendMessage(request, options) {
        return (0, exports.MessagesApiFp)(this.configuration).sendMessage(request, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MessagesApi = MessagesApi;
