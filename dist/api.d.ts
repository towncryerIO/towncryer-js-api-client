/**
 * Towncryer API
 * A service for handling business communication with its customers
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@volvlabs.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface APICredentialsLoginPayload
 */
export interface APICredentialsLoginPayload {
    /**
     *
     * @type {string}
     * @memberof APICredentialsLoginPayload
     */
    'apiKey'?: string;
    /**
     *
     * @type {string}
     * @memberof APICredentialsLoginPayload
     */
    'secretKey'?: string;
}
/**
 *
 * @export
 * @interface APICredentialsLoginResponse
 */
export interface APICredentialsLoginResponse {
    /**
     *
     * @type {string}
     * @memberof APICredentialsLoginResponse
     */
    'accessToken'?: string;
    /**
     *
     * @type {number}
     * @memberof APICredentialsLoginResponse
     */
    'expiresAt'?: number;
    /**
     *
     * @type {string}
     * @memberof APICredentialsLoginResponse
     */
    'refreshToken'?: string;
}
/**
 *
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     *
     * @type {number}
     * @memberof ApiError
     */
    'code'?: number;
    /**
     *
     * @type {object}
     * @memberof ApiError
     */
    'errors'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiError
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     *
     * @type {string}
     * @memberof ApiResponse
     */
    'code'?: string;
    /**
     *
     * @type {object}
     * @memberof ApiResponse
     */
    'data'?: object;
    /**
     *
     * @type {string}
     * @memberof ApiResponse
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface CreateCustomerRequest
 */
export interface CreateCustomerRequest {
    /**
     *
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'externalId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'firstName'?: string;
    /**
     *
     * @type {Array<CustomerIdentityRequest>}
     * @memberof CreateCustomerRequest
     */
    'identities': Array<CustomerIdentityRequest>;
    /**
     *
     * @type {string}
     * @memberof CreateCustomerRequest
     */
    'lastName'?: string;
    /**
     *
     * @type {TypesChannelCustomerCreatedFrom}
     * @memberof CreateCustomerRequest
     */
    'source': TypesChannelCustomerCreatedFrom;
}
/**
 *
 * @export
 * @interface CustomerIdentityRequest
 */
export interface CustomerIdentityRequest {
    /**
     *
     * @type {boolean}
     * @memberof CustomerIdentityRequest
     */
    'isPrimary'?: boolean;
    /**
     *
     * @type {EntitiesIdentityType}
     * @memberof CustomerIdentityRequest
     */
    'type': EntitiesIdentityType;
    /**
     *
     * @type {string}
     * @memberof CustomerIdentityRequest
     */
    'value': string;
}
/**
 *
 * @export
 * @interface EmailFrom
 */
export interface EmailFrom {
    /**
     *
     * @type {string}
     * @memberof EmailFrom
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof EmailFrom
     */
    'name': string;
}
/**
 *
 * @export
 * @interface EmailRecipient
 */
export interface EmailRecipient {
    /**
     *
     * @type {Array<number>}
     * @memberof EmailRecipient
     */
    'context'?: Array<number>;
    /**
     *
     * @type {string}
     * @memberof EmailRecipient
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof EmailRecipient
     */
    'name': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const EntitiesIdentityType: {
    readonly IdentityTypeEmail: "email";
    readonly IdentityTypePhone: "phone";
    readonly IdentityTypePushToken: "push_token";
    readonly IdentityTypeExternalID: "external_id";
};
export type EntitiesIdentityType = typeof EntitiesIdentityType[keyof typeof EntitiesIdentityType];
/**
 *
 * @export
 * @interface EventCustomerRequest
 */
export interface EventCustomerRequest {
    /**
     *
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'externalId': string;
    /**
     *
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'firstName'?: string;
    /**
     *
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'lastName'?: string;
    /**
     *
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'phoneNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof EventCustomerRequest
     */
    'pushNotificationToken'?: string;
}
/**
 *
 * @export
 * @interface MessagesStats
 */
export interface MessagesStats {
    /**
     *
     * @type {number}
     * @memberof MessagesStats
     */
    'failed'?: number;
    /**
     *
     * @type {number}
     * @memberof MessagesStats
     */
    'pending'?: number;
    /**
     *
     * @type {number}
     * @memberof MessagesStats
     */
    'read'?: number;
    /**
     *
     * @type {number}
     * @memberof MessagesStats
     */
    'sent'?: number;
    /**
     *
     * @type {number}
     * @memberof MessagesStats
     */
    'total'?: number;
}
/**
 *
 * @export
 * @interface PaginatePage
 */
export interface PaginatePage {
    /**
     *
     * @type {boolean}
     * @memberof PaginatePage
     */
    'error'?: boolean;
    /**
     *
     * @type {string}
     * @memberof PaginatePage
     */
    'error_message'?: string;
    /**
     *
     * @type {boolean}
     * @memberof PaginatePage
     */
    'first'?: boolean;
    /**
     *
     * @type {object}
     * @memberof PaginatePage
     */
    'items'?: object;
    /**
     *
     * @type {boolean}
     * @memberof PaginatePage
     */
    'last'?: boolean;
    /**
     *
     * @type {number}
     * @memberof PaginatePage
     */
    'max_page'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatePage
     */
    'page'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatePage
     */
    'size'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatePage
     */
    'total'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatePage
     */
    'total_pages'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatePage
     */
    'visible'?: number;
}
/**
 *
 * @export
 * @interface PublishEventPayload
 */
export interface PublishEventPayload {
    /**
     *
     * @type {EventCustomerRequest}
     * @memberof PublishEventPayload
     */
    'customer': EventCustomerRequest;
    /**
     *
     * @type {object}
     * @memberof PublishEventPayload
     */
    'data'?: object;
    /**
     *
     * @type {string}
     * @memberof PublishEventPayload
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof PublishEventPayload
     */
    'name': string;
}
/**
 *
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     *
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refreshToken': string;
}
/**
 *
 * @export
 * @interface RequestsClientAppLoginPayload
 */
export interface RequestsClientAppLoginPayload {
    /**
     *
     * @type {string}
     * @memberof RequestsClientAppLoginPayload
     */
    'apiKey'?: string;
}
/**
 *
 * @export
 * @interface ResponsesClientAppLoginResponsePayload
 */
export interface ResponsesClientAppLoginResponsePayload {
    /**
     *
     * @type {string}
     * @memberof ResponsesClientAppLoginResponsePayload
     */
    'accessToken'?: string;
    /**
     *
     * @type {number}
     * @memberof ResponsesClientAppLoginResponsePayload
     */
    'expiresAt'?: number;
    /**
     *
     * @type {string}
     * @memberof ResponsesClientAppLoginResponsePayload
     */
    'refreshToken'?: string;
}
/**
 *
 * @export
 * @interface ScheduleInfo
 */
export interface ScheduleInfo {
    /**
     *
     * @type {string}
     * @memberof ScheduleInfo
     */
    'jobId'?: string;
    /**
     *
     * @type {TypesJobStatus}
     * @memberof ScheduleInfo
     */
    'status'?: TypesJobStatus;
}
/**
 *
 * @export
 * @interface SendBulkMessagesPayload
 */
export interface SendBulkMessagesPayload {
    /**
     *
     * @type {Array<SendEmailPayload>}
     * @memberof SendBulkMessagesPayload
     */
    'emails'?: Array<SendEmailPayload>;
    /**
     *
     * @type {Array<SendPushNotificationPayload>}
     * @memberof SendBulkMessagesPayload
     */
    'pushNotifications'?: Array<SendPushNotificationPayload>;
    /**
     *
     * @type {Array<SendSMSPayload>}
     * @memberof SendBulkMessagesPayload
     */
    'smses'?: Array<SendSMSPayload>;
}
/**
 *
 * @export
 * @interface SendEmailPayload
 */
export interface SendEmailPayload {
    /**
     *
     * @type {string}
     * @memberof SendEmailPayload
     */
    'content'?: string;
    /**
     *
     * @type {EmailFrom}
     * @memberof SendEmailPayload
     */
    'from'?: EmailFrom;
    /**
     *
     * @type {Array<EmailRecipient>}
     * @memberof SendEmailPayload
     */
    'recipients': Array<EmailRecipient>;
    /**
     *
     * @type {string}
     * @memberof SendEmailPayload
     */
    'templateId'?: string;
    /**
     *
     * @type {string}
     * @memberof SendEmailPayload
     */
    'title'?: string;
}
/**
 *
 * @export
 * @interface SendPushNotificationPayload
 */
export interface SendPushNotificationPayload {
    /**
     *
     * @type {string}
     * @memberof SendPushNotificationPayload
     */
    'content'?: string;
    /**
     *
     * @type {Array<number>}
     * @memberof SendPushNotificationPayload
     */
    'data'?: Array<number>;
    /**
     *
     * @type {Array<SendPushNotificationRecipient>}
     * @memberof SendPushNotificationPayload
     */
    'recipients': Array<SendPushNotificationRecipient>;
    /**
     *
     * @type {string}
     * @memberof SendPushNotificationPayload
     */
    'templateId'?: string;
    /**
     *
     * @type {string}
     * @memberof SendPushNotificationPayload
     */
    'title'?: string;
}
/**
 *
 * @export
 * @interface SendPushNotificationRecipient
 */
export interface SendPushNotificationRecipient {
    /**
     *
     * @type {Array<number>}
     * @memberof SendPushNotificationRecipient
     */
    'context'?: Array<number>;
    /**
     *
     * @type {string}
     * @memberof SendPushNotificationRecipient
     */
    'token': string;
}
/**
 *
 * @export
 * @interface SendSMSPayload
 */
export interface SendSMSPayload {
    /**
     *
     * @type {string}
     * @memberof SendSMSPayload
     */
    'content'?: string;
    /**
     *
     * @type {string}
     * @memberof SendSMSPayload
     */
    'from': string;
    /**
     *
     * @type {string}
     * @memberof SendSMSPayload
     */
    'templateId'?: string;
    /**
     *
     * @type {Array<SendSMSRecipient>}
     * @memberof SendSMSPayload
     */
    'to': Array<SendSMSRecipient>;
}
/**
 *
 * @export
 * @interface SendSMSRecipient
 */
export interface SendSMSRecipient {
    /**
     *
     * @type {Array<number>}
     * @memberof SendSMSRecipient
     */
    'context'?: Array<number>;
    /**
     *
     * @type {string}
     * @memberof SendSMSRecipient
     */
    'phoneNumber': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const TypesChannelCustomerCreatedFrom: {
    readonly ChannelCustomerCreatedFromWhatsApp: "WhatsApp";
    readonly ChannelCustomerCreatedFromEvent: "Event";
    readonly ChannelCustomerCreatedFromCSVUpload: "CSVUpload";
    readonly ChannelCustomerCreatedFromTowncryerWebappForm: "TowncryerWebappForm";
    readonly ChannelCustomerCreatedFromTowncryerAPI: "TowncryerAPI";
};
export type TypesChannelCustomerCreatedFrom = typeof TypesChannelCustomerCreatedFrom[keyof typeof TypesChannelCustomerCreatedFrom];
/**
 *
 * @export
 * @enum {number}
 */
export declare const TypesJobStatus: {
    readonly JobStatusPending: 0;
    readonly JobStatusQueued: 1;
    readonly JobStatusProcessing: 2;
    readonly JobStatusCompleted: 3;
    readonly JobStatusFailed: 4;
    readonly JobStatusCancelled: 5;
};
export type TypesJobStatus = typeof TypesJobStatus[keyof typeof TypesJobStatus];
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Logs in a client app using client app credentials
     * @summary Client App Login
     * @param {RequestsClientAppLoginPayload} request Client app login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientAppLogin: (request: RequestsClientAppLoginPayload, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a short lived token using ApiKey and ApiSecret
     * @summary Get Short Lived Token
     * @param {APICredentialsLoginPayload} request Login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShortLivedToken: (request: APICredentialsLoginPayload, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Refreshes a short lived token
     * @summary Refresh Short Lived Token
     * @param {RefreshTokenRequest} request Refresh token request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshShortLivedToken: (request: RefreshTokenRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     * Logs in a client app using client app credentials
     * @summary Client App Login
     * @param {RequestsClientAppLoginPayload} request Client app login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientAppLogin(request: RequestsClientAppLoginPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesClientAppLoginResponsePayload>>;
    /**
     * Gets a short lived token using ApiKey and ApiSecret
     * @summary Get Short Lived Token
     * @param {APICredentialsLoginPayload} request Login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShortLivedToken(request: APICredentialsLoginPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APICredentialsLoginResponse>>;
    /**
     * Refreshes a short lived token
     * @summary Refresh Short Lived Token
     * @param {RefreshTokenRequest} request Refresh token request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshShortLivedToken(request: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APICredentialsLoginResponse>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Logs in a client app using client app credentials
     * @summary Client App Login
     * @param {RequestsClientAppLoginPayload} request Client app login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientAppLogin(request: RequestsClientAppLoginPayload, options?: RawAxiosRequestConfig): AxiosPromise<ResponsesClientAppLoginResponsePayload>;
    /**
     * Gets a short lived token using ApiKey and ApiSecret
     * @summary Get Short Lived Token
     * @param {APICredentialsLoginPayload} request Login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShortLivedToken(request: APICredentialsLoginPayload, options?: RawAxiosRequestConfig): AxiosPromise<APICredentialsLoginResponse>;
    /**
     * Refreshes a short lived token
     * @summary Refresh Short Lived Token
     * @param {RefreshTokenRequest} request Refresh token request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshShortLivedToken(request: RefreshTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<APICredentialsLoginResponse>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     * Logs in a client app using client app credentials
     * @summary Client App Login
     * @param {RequestsClientAppLoginPayload} request Client app login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    clientAppLogin(request: RequestsClientAppLoginPayload, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ResponsesClientAppLoginResponsePayload, any>>;
    /**
     * Gets a short lived token using ApiKey and ApiSecret
     * @summary Get Short Lived Token
     * @param {APICredentialsLoginPayload} request Login request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getShortLivedToken(request: APICredentialsLoginPayload, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<APICredentialsLoginResponse, any>>;
    /**
     * Refreshes a short lived token
     * @summary Refresh Short Lived Token
     * @param {RefreshTokenRequest} request Refresh token request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    refreshShortLivedToken(request: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<APICredentialsLoginResponse, any>>;
}
/**
 * CustomersApi - axios parameter creator
 * @export
 */
export declare const CustomersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a customer
     * @summary Create Customer
     * @param {CreateCustomerRequest} request Create customer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer: (request: CreateCustomerRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CustomersApi - functional programming interface
 * @export
 */
export declare const CustomersApiFp: (configuration?: Configuration) => {
    /**
     * Creates a customer
     * @summary Create Customer
     * @param {CreateCustomerRequest} request Create customer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(request: CreateCustomerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
};
/**
 * CustomersApi - factory interface
 * @export
 */
export declare const CustomersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a customer
     * @summary Create Customer
     * @param {CreateCustomerRequest} request Create customer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(request: CreateCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse>;
};
/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export declare class CustomersApi extends BaseAPI {
    /**
     * Creates a customer
     * @summary Create Customer
     * @param {CreateCustomerRequest} request Create customer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    createCustomer(request: CreateCustomerRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiResponse, any>>;
}
/**
 * EventsApi - axios parameter creator
 * @export
 */
export declare const EventsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accepts an event
     * @summary Accept Event
     * @param {PublishEventPayload} request Event request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accept: (request: PublishEventPayload, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventsApi - functional programming interface
 * @export
 */
export declare const EventsApiFp: (configuration?: Configuration) => {
    /**
     * Accepts an event
     * @summary Accept Event
     * @param {PublishEventPayload} request Event request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accept(request: PublishEventPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
};
/**
 * EventsApi - factory interface
 * @export
 */
export declare const EventsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accepts an event
     * @summary Accept Event
     * @param {PublishEventPayload} request Event request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accept(request: PublishEventPayload, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse>;
};
/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export declare class EventsApi extends BaseAPI {
    /**
     * Accepts an event
     * @summary Accept Event
     * @param {PublishEventPayload} request Event request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    accept(request: PublishEventPayload, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiResponse, any>>;
}
/**
 * MessagesApi - axios parameter creator
 * @export
 */
export declare const MessagesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get customer\'s messages stats while optionally filtering by channel
     * @summary Get customer\'s messages stats
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerMessagesStats: (customerId: string, channel?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List customer\'s messages while optionally filtering by channel
     * @summary List customer\'s messages filtering by channel
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessagesByCustomerAndChannel: (customerId: string, channel?: string, page?: number, size?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Marks a message as read
     * @summary Mark Message As Read
     * @param {string} id Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markMessageAsRead: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sends a message
     * @summary Send Message
     * @param {SendBulkMessagesPayload} request Send bulk messages payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendMessage: (request: SendBulkMessagesPayload, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MessagesApi - functional programming interface
 * @export
 */
export declare const MessagesApiFp: (configuration?: Configuration) => {
    /**
     * Get customer\'s messages stats while optionally filtering by channel
     * @summary Get customer\'s messages stats
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerMessagesStats(customerId: string, channel?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesStats>>;
    /**
     * List customer\'s messages while optionally filtering by channel
     * @summary List customer\'s messages filtering by channel
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessagesByCustomerAndChannel(customerId: string, channel?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatePage>>;
    /**
     * Marks a message as read
     * @summary Mark Message As Read
     * @param {string} id Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markMessageAsRead(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>>;
    /**
     * Sends a message
     * @summary Send Message
     * @param {SendBulkMessagesPayload} request Send bulk messages payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendMessage(request: SendBulkMessagesPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleInfo>>;
};
/**
 * MessagesApi - factory interface
 * @export
 */
export declare const MessagesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get customer\'s messages stats while optionally filtering by channel
     * @summary Get customer\'s messages stats
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerMessagesStats(customerId: string, channel?: string, options?: RawAxiosRequestConfig): AxiosPromise<MessagesStats>;
    /**
     * List customer\'s messages while optionally filtering by channel
     * @summary List customer\'s messages filtering by channel
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessagesByCustomerAndChannel(customerId: string, channel?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatePage>;
    /**
     * Marks a message as read
     * @summary Mark Message As Read
     * @param {string} id Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markMessageAsRead(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse>;
    /**
     * Sends a message
     * @summary Send Message
     * @param {SendBulkMessagesPayload} request Send bulk messages payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendMessage(request: SendBulkMessagesPayload, options?: RawAxiosRequestConfig): AxiosPromise<ScheduleInfo>;
};
/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export declare class MessagesApi extends BaseAPI {
    /**
     * Get customer\'s messages stats while optionally filtering by channel
     * @summary Get customer\'s messages stats
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    getCustomerMessagesStats(customerId: string, channel?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MessagesStats, any>>;
    /**
     * List customer\'s messages while optionally filtering by channel
     * @summary List customer\'s messages filtering by channel
     * @param {string} customerId Customer ID
     * @param {string} [channel] Channel
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    listMessagesByCustomerAndChannel(customerId: string, channel?: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatePage, any>>;
    /**
     * Marks a message as read
     * @summary Mark Message As Read
     * @param {string} id Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    markMessageAsRead(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiResponse, any>>;
    /**
     * Sends a message
     * @summary Send Message
     * @param {SendBulkMessagesPayload} request Send bulk messages payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    sendMessage(request: SendBulkMessagesPayload, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleInfo, any>>;
}
